definitions:
  authentication.AuthenticationResponse:
    properties:
      accessToken:
        type: string
      accessTokenExpiresAt:
        type: string
      idToken:
        type: string
      refreshToken:
        type: string
    type: object
  authentication.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  authentication.Oauth2FacebookLoginRequest:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    required:
    - email
    - id
    - name
    type: object
  authentication.Oauth2GoogleLoginRequest:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  common.InfoResponse:
    properties:
      env:
        type: string
      hostname:
        type: string
      ip:
        type: string
      userAgent:
        type: string
    type: object
  common.MessageResponse:
    properties:
      message:
        type: string
    type: object
  exception.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
      statusCode:
        type: integer
    type: object
  profile.UpdatePasswordRequest:
    properties:
      newPassword:
        minLength: 8
        type: string
      oldPassword:
        minLength: 8
        type: string
    required:
    - newPassword
    - oldPassword
    type: object
  profile.UpdateProfileRequest:
    properties:
      name:
        maxLength: 100
        type: string
    required:
    - name
    type: object
  role.Role:
    enum:
    - ADMIN
    - USER
    type: string
    x-enum-varnames:
    - ADMIN
    - USER
  user.AuthenticatedUser:
    properties:
      createdAt:
        type: string
      imageId:
        type: string
      imageUrl:
        type: string
      isActive:
        type: boolean
      name:
        type: string
      role:
        $ref: '#/definitions/role.Role'
      updatedAt:
        type: string
      uuid:
        type: string
    type: object
  user.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        maxLength: 100
        minLength: 6
        type: string
      role:
        $ref: '#/definitions/role.Role'
    required:
    - email
    - name
    - role
    type: object
  user.OauthUserProvider:
    properties:
      email: {}
      externalUserId:
        type: string
      provider:
        type: string
    type: object
  user.RegisterRequest:
    properties:
      email:
        type: string
      name:
        maxLength: 100
        minLength: 6
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  user.UpdateUserRequest:
    properties:
      active:
        type: boolean
      email:
        type: string
      name:
        maxLength: 100
        minLength: 6
        type: string
      password:
        type: string
      role:
        $ref: '#/definitions/role.Role'
    type: object
  user.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      imageId:
        type: string
      imageUrl:
        type: string
      isActive:
        type: boolean
      name:
        type: string
      providers:
        items:
          $ref: '#/definitions/user.OauthUserProvider'
        type: array
      role:
        $ref: '#/definitions/role.Role'
      updatedAt:
        type: string
      uuid:
        type: string
    type: object
info:
  contact: {}
paths:
  /v1/index:
    get:
      consumes:
      - application/json
      description: welcome message
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.MessageResponse'
      summary: welcome message
      tags:
      - index
  /v1/info:
    get:
      consumes:
      - application/json
      description: get app info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.InfoResponse'
      summary: get app info
      tags:
      - index
  /v1/login:
    post:
      consumes:
      - application/json
      description: login
      parameters:
      - description: Login Request
        in: body
        name: LoginRequest
        required: true
        schema:
          $ref: '#/definitions/authentication.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication.AuthenticationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
      summary: login
      tags:
      - authentication
  /v1/logout:
    post:
      consumes:
      - application/json
      description: logout
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication.AuthenticationResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
      summary: logout
      tags:
      - authentication
  /v1/oauth2/facebook:
    post:
      consumes:
      - application/json
      description: facebook login
      parameters:
      - description: Oauth2 Facebook Login Request
        in: body
        name: Oauth2FacebookLoginRequest
        required: true
        schema:
          $ref: '#/definitions/authentication.Oauth2FacebookLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication.AuthenticationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
      summary: facebook login
      tags:
      - authentication
  /v1/oauth2/google:
    post:
      consumes:
      - application/json
      description: google login
      parameters:
      - description: Oauth2 Google Login Request
        in: body
        name: Oauth2GoogleLoginRequest
        required: true
        schema:
          $ref: '#/definitions/authentication.Oauth2GoogleLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication.AuthenticationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
      summary: google login
      tags:
      - authentication
  /v1/profile:
    delete:
      consumes:
      - application/json
      description: delete profile
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
      summary: delete profile
      tags:
      - profile
    get:
      consumes:
      - application/json
      description: get profile
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
      summary: get profile
      tags:
      - profile
    put:
      consumes:
      - application/json
      description: update profile
      parameters:
      - description: Update Profile Request
        in: body
        name: UpdateProfileRequest
        required: true
        schema:
          $ref: '#/definitions/profile.UpdateProfileRequest'
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
      summary: update profile
      tags:
      - profile
  /v1/profile/image:
    put:
      consumes:
      - multipart/form-data
      description: update image
      parameters:
      - description: image file
        in: formData
        name: image
        required: true
        type: file
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
      summary: update image
      tags:
      - profile
  /v1/profile/password:
    put:
      consumes:
      - application/json
      description: update password
      parameters:
      - description: Update Password Request
        in: body
        name: UpdatePasswordRequest
        required: true
        schema:
          $ref: '#/definitions/profile.UpdatePasswordRequest'
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
      summary: update password
      tags:
      - profile
  /v1/refresh-token:
    post:
      consumes:
      - application/json
      description: refresh token
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication.AuthenticationResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
      summary: refresh token
      tags:
      - authentication
  /v1/register:
    post:
      consumes:
      - application/json
      description: register new user
      parameters:
      - description: Register Request
        in: body
        name: RegisterRequest
        required: true
        schema:
          $ref: '#/definitions/user.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.AuthenticatedUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
      summary: register new user
      tags:
      - user
  /v1/users:
    get:
      consumes:
      - application/json
      description: get all users
      parameters:
      - description: Role
        in: query
        name: role
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Page size
        in: query
        name: pageSize
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.AuthenticatedUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
      summary: get all users
      tags:
      - user
    post:
      consumes:
      - application/json
      description: create new user
      parameters:
      - description: Create User Request
        in: body
        name: CreateUserRequest
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserRequest'
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.AuthenticatedUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
      summary: create new user
      tags:
      - user
  /v1/users/{uuid}:
    delete:
      consumes:
      - application/json
      description: delete user by uuid
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
      summary: delete user by uuid
      tags:
      - user
    get:
      consumes:
      - application/json
      description: get user by uuid
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.AuthenticatedUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
      summary: get user by uuid
      tags:
      - user
    put:
      consumes:
      - application/json
      description: update user by uuid
      parameters:
      - description: Update User Request
        in: body
        name: UpdateUserRequest
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserRequest'
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/exception.ErrorResponse'
      summary: update user by uuid
      tags:
      - user
swagger: "2.0"
