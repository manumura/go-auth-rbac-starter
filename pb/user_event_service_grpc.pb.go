// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: user_event_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserEventClient is the client API for UserEvent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserEventClient interface {
	GetUserEvents(ctx context.Context, in *UserEventsRequest, opts ...grpc.CallOption) (UserEvent_GetUserEventsClient, error)
}

type userEventClient struct {
	cc grpc.ClientConnInterface
}

func NewUserEventClient(cc grpc.ClientConnInterface) UserEventClient {
	return &userEventClient{cc}
}

func (c *userEventClient) GetUserEvents(ctx context.Context, in *UserEventsRequest, opts ...grpc.CallOption) (UserEvent_GetUserEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserEvent_ServiceDesc.Streams[0], "/pb.UserEvent/GetUserEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &userEventGetUserEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserEvent_GetUserEventsClient interface {
	Recv() (*UserEventsResponse, error)
	grpc.ClientStream
}

type userEventGetUserEventsClient struct {
	grpc.ClientStream
}

func (x *userEventGetUserEventsClient) Recv() (*UserEventsResponse, error) {
	m := new(UserEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserEventServer is the server API for UserEvent service.
// All implementations must embed UnimplementedUserEventServer
// for forward compatibility
type UserEventServer interface {
	GetUserEvents(*UserEventsRequest, UserEvent_GetUserEventsServer) error
	mustEmbedUnimplementedUserEventServer()
}

// UnimplementedUserEventServer must be embedded to have forward compatible implementations.
type UnimplementedUserEventServer struct {
}

func (UnimplementedUserEventServer) GetUserEvents(*UserEventsRequest, UserEvent_GetUserEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserEvents not implemented")
}
func (UnimplementedUserEventServer) mustEmbedUnimplementedUserEventServer() {}

// UnsafeUserEventServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserEventServer will
// result in compilation errors.
type UnsafeUserEventServer interface {
	mustEmbedUnimplementedUserEventServer()
}

func RegisterUserEventServer(s grpc.ServiceRegistrar, srv UserEventServer) {
	s.RegisterService(&UserEvent_ServiceDesc, srv)
}

func _UserEvent_GetUserEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserEventServer).GetUserEvents(m, &userEventGetUserEventsServer{stream})
}

type UserEvent_GetUserEventsServer interface {
	Send(*UserEventsResponse) error
	grpc.ServerStream
}

type userEventGetUserEventsServer struct {
	grpc.ServerStream
}

func (x *userEventGetUserEventsServer) Send(m *UserEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// UserEvent_ServiceDesc is the grpc.ServiceDesc for UserEvent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserEvent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserEvent",
	HandlerType: (*UserEventServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUserEvents",
			Handler:       _UserEvent_GetUserEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "user_event_service.proto",
}
