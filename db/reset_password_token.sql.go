// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: reset_password_token.sql

package db

import (
	"context"
	"database/sql"
)

const createResetPasswordToken = `-- name: CreateResetPasswordToken :one
INSERT INTO reset_password_token (
        user_id,
        token,
        expires_at,
        created_at,
        updated_at
    )
VALUES (?, ?, ?, ?, ?)
RETURNING user_id, token, expires_at, created_at, updated_at
`

type CreateResetPasswordTokenParams struct {
	UserID    int64          `json:"userId"`
	Token     string         `json:"token"`
	ExpiresAt string         `json:"expiresAt"`
	CreatedAt string         `json:"createdAt"`
	UpdatedAt sql.NullString `json:"updatedAt"`
}

func (q *Queries) CreateResetPasswordToken(ctx context.Context, arg CreateResetPasswordTokenParams) (ResetPasswordToken, error) {
	row := q.db.QueryRowContext(ctx, createResetPasswordToken,
		arg.UserID,
		arg.Token,
		arg.ExpiresAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i ResetPasswordToken
	err := row.Scan(
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteResetPasswordToken = `-- name: DeleteResetPasswordToken :exec
DELETE FROM reset_password_token
WHERE user_id = ?
`

func (q *Queries) DeleteResetPasswordToken(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteResetPasswordToken, userID)
	return err
}
