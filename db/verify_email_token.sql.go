// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: verify_email_token.sql

package db

import (
	"context"
	"database/sql"
)

const createVerifyEmailToken = `-- name: CreateVerifyEmailToken :one
INSERT INTO verify_email_token (
        user_id,
        token,
        expired_at,
        created_at,
        updated_at
    )
VALUES (?, ?, ?, ?, ?)
RETURNING user_id, token, expired_at, created_at, updated_at
`

type CreateVerifyEmailTokenParams struct {
	UserID    int64          `json:"userId"`
	Token     string         `json:"token"`
	ExpiredAt string         `json:"expiredAt"`
	CreatedAt string         `json:"createdAt"`
	UpdatedAt sql.NullString `json:"updatedAt"`
}

func (q *Queries) CreateVerifyEmailToken(ctx context.Context, arg CreateVerifyEmailTokenParams) (VerifyEmailToken, error) {
	row := q.db.QueryRowContext(ctx, createVerifyEmailToken,
		arg.UserID,
		arg.Token,
		arg.ExpiredAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i VerifyEmailToken
	err := row.Scan(
		&i.UserID,
		&i.Token,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteVerifyEmailToken = `-- name: DeleteVerifyEmailToken :exec
DELETE FROM verify_email_token
WHERE user_id = ?
`

func (q *Queries) DeleteVerifyEmailToken(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteVerifyEmailToken, userID)
	return err
}

const getVerifyEmailTokenByToken = `-- name: GetVerifyEmailTokenByToken :one
SELECT user_id, token, expired_at, created_at, updated_at FROM verify_email_token
WHERE token = ?
`

func (q *Queries) GetVerifyEmailTokenByToken(ctx context.Context, token string) (VerifyEmailToken, error) {
	row := q.db.QueryRowContext(ctx, getVerifyEmailTokenByToken, token)
	var i VerifyEmailToken
	err := row.Scan(
		&i.UserID,
		&i.Token,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
