// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: authentication.sql

package db

import (
	"context"
)

const createAuthenticationToken = `-- name: CreateAuthenticationToken :one
INSERT INTO authentication_token (
        user_id,
        access_token,
        access_token_expires_at,
        refresh_token,
        refresh_token_expires_at,
        created_at
    )
VALUES (?, ?, ?, ?, ?, ?)
RETURNING user_id, access_token, access_token_expires_at, refresh_token, refresh_token_expires_at, created_at
`

type CreateAuthenticationTokenParams struct {
	UserID                int64  `json:"userId"`
	AccessToken           string `json:"accessToken"`
	AccessTokenExpiresAt  string `json:"accessTokenExpiresAt"`
	RefreshToken          string `json:"refreshToken"`
	RefreshTokenExpiresAt string `json:"refreshTokenExpiresAt"`
	CreatedAt             string `json:"createdAt"`
}

func (q *Queries) CreateAuthenticationToken(ctx context.Context, arg CreateAuthenticationTokenParams) (AuthenticationToken, error) {
	row := q.db.QueryRowContext(ctx, createAuthenticationToken,
		arg.UserID,
		arg.AccessToken,
		arg.AccessTokenExpiresAt,
		arg.RefreshToken,
		arg.RefreshTokenExpiresAt,
		arg.CreatedAt,
	)
	var i AuthenticationToken
	err := row.Scan(
		&i.UserID,
		&i.AccessToken,
		&i.AccessTokenExpiresAt,
		&i.RefreshToken,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAuthenticationToken = `-- name: DeleteAuthenticationToken :exec
DELETE FROM authentication_token
WHERE user_id = ?
`

func (q *Queries) DeleteAuthenticationToken(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteAuthenticationToken, userID)
	return err
}

const getAuthenticationTokenByAccessToken = `-- name: GetAuthenticationTokenByAccessToken :one
SELECT user_id, access_token, access_token_expires_at, refresh_token, refresh_token_expires_at, created_at FROM authentication_token
WHERE access_token = ?
`

func (q *Queries) GetAuthenticationTokenByAccessToken(ctx context.Context, accessToken string) (AuthenticationToken, error) {
	row := q.db.QueryRowContext(ctx, getAuthenticationTokenByAccessToken, accessToken)
	var i AuthenticationToken
	err := row.Scan(
		&i.UserID,
		&i.AccessToken,
		&i.AccessTokenExpiresAt,
		&i.RefreshToken,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getAuthenticationTokenByRefreshToken = `-- name: GetAuthenticationTokenByRefreshToken :one
SELECT user_id, access_token, access_token_expires_at, refresh_token, refresh_token_expires_at, created_at FROM authentication_token
WHERE refresh_token = ?
`

func (q *Queries) GetAuthenticationTokenByRefreshToken(ctx context.Context, refreshToken string) (AuthenticationToken, error) {
	row := q.db.QueryRowContext(ctx, getAuthenticationTokenByRefreshToken, refreshToken)
	var i AuthenticationToken
	err := row.Scan(
		&i.UserID,
		&i.AccessToken,
		&i.AccessTokenExpiresAt,
		&i.RefreshToken,
		&i.RefreshTokenExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
