// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO user (
        id,
        uuid,
        password,
        email,
        name,
        is_active,
        image_id,
        image_url,
        created_at,
        updated_at,
        role_id
    )
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, uuid, password, email, name, is_active, image_id, image_url, created_at, updated_at, role_id
`

type CreateUserParams struct {
	ID        int64          `json:"id"`
	Uuid      string         `json:"uuid"`
	Password  string         `json:"password"`
	Email     string         `json:"email"`
	Name      sql.NullString `json:"name"`
	IsActive  int64          `json:"isActive"`
	ImageID   sql.NullString `json:"imageId"`
	ImageUrl  sql.NullString `json:"imageUrl"`
	CreatedAt string         `json:"createdAt"`
	UpdatedAt sql.NullString `json:"updatedAt"`
	RoleID    int64          `json:"roleId"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Uuid,
		arg.Password,
		arg.Email,
		arg.Name,
		arg.IsActive,
		arg.ImageID,
		arg.ImageUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.RoleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Password,
		&i.Email,
		&i.Name,
		&i.IsActive,
		&i.ImageID,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RoleID,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, uuid, password, email, name, is_active, image_id, image_url, created_at, updated_at, role_id
FROM user
WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Password,
		&i.Email,
		&i.Name,
		&i.IsActive,
		&i.ImageID,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RoleID,
	)
	return i, err
}
